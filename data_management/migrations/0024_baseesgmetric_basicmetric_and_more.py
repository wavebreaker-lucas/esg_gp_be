# Generated by Django 5.1.7 on 2025-04-05 20:14

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('data_management', '0023_esgmetricsubmission_source_identifier_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseESGMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order within the form')),
                ('requires_evidence', models.BooleanField(default=False, help_text='Does this metric require supporting evidence?')),
                ('validation_rules', models.JSONField(blank=True, default=dict, help_text='Optional validation rules (e.g., min/max, regex for text)')),
                ('location', models.CharField(choices=[('HK', 'Hong Kong'), ('PRC', 'Mainland China'), ('ALL', 'All Locations')], default='ALL', help_text='Location relevance (e.g., HK, PRC, ALL)', max_length=3)),
                ('is_required', models.BooleanField(default=True, help_text='Whether users must provide input for this metric')),
                ('ocr_analyzer_id', models.CharField(blank=True, help_text='Custom Azure Form Recognizer model ID for evidence processing (if applicable)', max_length=100, null=True)),
                ('aggregates_inputs', models.BooleanField(default=False, help_text="Indicates if this metric's value is derived from aggregating other inputs/metrics")),
                ('help_text', models.TextField(blank=True, help_text='Optional guidance text displayed to the user in the form')),
                ('form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_metrics', to='data_management.esgform')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_%(app_label)s.%(class)s_set+', to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'ESG Metric (Base)',
                'verbose_name_plural': 'ESG Metrics (Base)',
                'ordering': ['form', 'order'],
            },
        ),
        migrations.CreateModel(
            name='BasicMetric',
            fields=[
                ('baseesgmetric_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='data_management.baseesgmetric')),
                ('unit_type', models.CharField(choices=[('kWh', 'Kilowatt Hours'), ('MWh', 'Megawatt Hours'), ('m3', 'Cubic Meters'), ('tonnes', 'Tonnes'), ('tCO2e', 'Tonnes CO2 Equivalent'), ('person', 'Person'), ('hours', 'Hours'), ('days', 'Days'), ('count', 'Count'), ('percentage', 'Percentage'), ('text', 'Text'), ('custom', 'Custom Unit')], default='count', help_text='The type of unit this metric uses', max_length=20)),
                ('custom_unit', models.CharField(blank=True, help_text="Specify the unit if unit_type is 'custom'", max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Basic Metric',
                'verbose_name_plural': 'Basic Metrics',
            },
            bases=('data_management.baseesgmetric',),
        ),
        migrations.CreateModel(
            name='MaterialTrackingMatrixMetric',
            fields=[
                ('baseesgmetric_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='data_management.baseesgmetric')),
                ('category', models.CharField(choices=[('waste', 'Waste'), ('packaging', 'Packaging'), ('other', 'Other Material')], default='waste', help_text='The category of material being tracked', max_length=50)),
                ('max_material_types', models.PositiveIntegerField(default=10, help_text='Maximum number of material type columns users can define')),
                ('default_unit', models.CharField(default='tonnes', help_text='Default unit for material amounts (e.g., tonnes, kg, m3)', max_length=50)),
                ('allow_custom_units_per_type', models.BooleanField(default=False, help_text='Allow users to specify different units for each material type column?')),
                ('fixed_time_period', models.CharField(choices=[('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('annual', 'Annual')], default='monthly', help_text='The time period represented by the rows (usually monthly)', max_length=20)),
            ],
            options={
                'verbose_name': 'Material Tracking Matrix Metric',
                'verbose_name_plural': 'Material Tracking Matrix Metrics',
            },
            bases=('data_management.baseesgmetric',),
        ),
        migrations.CreateModel(
            name='MultiFieldMetric',
            fields=[
                ('baseesgmetric_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='data_management.baseesgmetric')),
                ('field_definitions', models.JSONField(default=list, help_text='Definitions of the fixed fields/columns, including type, label, and unit.')),
            ],
            options={
                'verbose_name': 'Multi-Field Metric',
                'verbose_name_plural': 'Multi-Field Metrics',
            },
            bases=('data_management.baseesgmetric',),
        ),
        migrations.CreateModel(
            name='MultiFieldTimeSeriesMetric',
            fields=[
                ('baseesgmetric_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='data_management.baseesgmetric')),
                ('field_definitions', models.JSONField(default=list, help_text='Definitions of the fixed fields/columns, including type, label, unit, and optional calculations.')),
                ('frequency', models.CharField(choices=[('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('annual', 'Annual')], default='monthly', help_text='The time period represented by each row (e.g., monthly).', max_length=20)),
                ('show_total_row', models.BooleanField(default=True, help_text='Whether to display an automatically calculated total row.')),
                ('total_row_aggregation', models.JSONField(blank=True, default=dict, help_text='Defines how each field is aggregated in the total row (e.g., SUM, AVG, RECALCULATE).')),
            ],
            options={
                'verbose_name': 'Multi-Field Time Series Metric',
                'verbose_name_plural': 'Multi-Field Time Series Metrics',
            },
            bases=('data_management.baseesgmetric',),
        ),
        migrations.CreateModel(
            name='TabularMetric',
            fields=[
                ('baseesgmetric_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='data_management.baseesgmetric')),
                ('column_definitions', models.JSONField(default=list, help_text='Structure of table columns. E.g., [{"key": "col_a", "label": "Column A", "type": "text", "required": true}]')),
                ('allow_adding_rows', models.BooleanField(default=True, help_text='Can users add new rows to the table?')),
                ('allow_deleting_rows', models.BooleanField(default=True, help_text='Can users delete rows from the table?')),
                ('max_rows', models.PositiveIntegerField(blank=True, help_text='Optional limit on the number of rows allowed', null=True)),
                ('min_rows', models.PositiveIntegerField(default=0, help_text='Minimum number of rows required (0 means optional)')),
            ],
            options={
                'verbose_name': 'Tabular Metric',
                'verbose_name_plural': 'Tabular Metrics',
            },
            bases=('data_management.baseesgmetric',),
        ),
        migrations.CreateModel(
            name='TimeSeriesMetric',
            fields=[
                ('baseesgmetric_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='data_management.baseesgmetric')),
                ('frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('annual', 'Annual')], default='monthly', help_text='How often is data expected for this metric?', max_length=20)),
                ('aggregation_method', models.CharField(choices=[('SUM', 'Sum'), ('AVG', 'Average'), ('LAST', 'Last Value')], default='SUM', help_text='How should values be aggregated over a larger period (e.g., monthly sum to annual)?', max_length=20)),
                ('unit_type', models.CharField(choices=[('kWh', 'Kilowatt Hours'), ('MWh', 'Megawatt Hours'), ('m3', 'Cubic Meters'), ('tonnes', 'Tonnes'), ('tCO2e', 'Tonnes CO2 Equivalent'), ('person', 'Person'), ('hours', 'Hours'), ('days', 'Days'), ('count', 'Count'), ('percentage', 'Percentage'), ('text', 'Text'), ('custom', 'Custom Unit')], default='count', max_length=20)),
                ('custom_unit', models.CharField(blank=True, help_text="Specify unit if unit_type is 'custom'", max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Time Series Metric',
                'verbose_name_plural': 'Time Series Metrics',
            },
            bases=('data_management.baseesgmetric',),
        ),
    ]
