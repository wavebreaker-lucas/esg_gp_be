# Generated by Django 5.1.7 on 2025-04-08 12:38

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0009_add_child_metric_perms'),
        ('data_management', '0031_alter_baseesgmetric_description_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='baseesgmetric',
            name='emission_category',
            field=models.CharField(blank=True, db_index=True, help_text='Category used to lookup GHG Emission Factors (e.g., Energy, Waste)', max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='baseesgmetric',
            name='emission_sub_category',
            field=models.CharField(blank=True, db_index=True, help_text='Sub-category used to lookup GHG Emission Factors (e.g., Grid Electricity, Landfill Waste)', max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='baseesgmetric',
            name='energy_category',
            field=models.CharField(blank=True, db_index=True, help_text='Category used to lookup Energy Conversion Factors (e.g., Petroleum products, Natural gas)', max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='baseesgmetric',
            name='energy_sub_category',
            field=models.CharField(blank=True, db_index=True, help_text='Sub-category used to lookup Energy Conversion Factors (e.g., Gas/ Diesel oil, Towngas)', max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='baseesgmetric',
            name='pollutant_category',
            field=models.CharField(blank=True, db_index=True, help_text='Category used to lookup Pollutant Factors (e.g., Vehicles, Gaseous Fuel Consumption)', max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='baseesgmetric',
            name='pollutant_sub_category',
            field=models.CharField(blank=True, db_index=True, help_text='Sub-category used to lookup Pollutant Factors (e.g., Private cars, Towngas)', max_length=255, null=True),
        ),
        migrations.CreateModel(
            name='EnergyConversionFactor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(db_index=True, help_text='Broad activity category (e.g., Petroleum products, Coals, Natural gas)', max_length=100)),
                ('sub_category', models.CharField(db_index=True, help_text='Specific fuel/activity type (e.g., Gas/ Diesel oil, Anthracite, Towngas)', max_length=255)),
                ('activity_unit', models.CharField(help_text='Unit of the *activity data* (e.g., litres, kg, Unit (= 0.048 GJ), cubic meter)', max_length=50)),
                ('conversion_factor', models.DecimalField(decimal_places=7, help_text='Numerical factor to convert activity unit to target unit', max_digits=15)),
                ('target_unit', models.CharField(default='kWh', help_text='The target energy unit after conversion (e.g., kWh, MJ)', max_length=50)),
                ('year', models.PositiveIntegerField(db_index=True, help_text='Applicable year for the factor')),
                ('source', models.CharField(blank=True, help_text='Source document name', max_length=255)),
                ('source_url', models.URLField(blank=True, max_length=500, null=True)),
                ('region', models.CharField(blank=True, db_index=True, help_text='Geographic region applicability', max_length=100, null=True)),
            ],
            options={
                'verbose_name': 'Energy Conversion Factor',
                'verbose_name_plural': 'Energy Conversion Factors',
                'ordering': ['-year', 'category', 'sub_category', 'region'],
                'unique_together': {('year', 'category', 'sub_category', 'activity_unit', 'target_unit', 'region')},
            },
        ),
        migrations.CreateModel(
            name='GHGEmissionFactor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Constructed descriptive name (e.g., Diesel - Stationary combustion (Generators) - HKEX Appendix 2 2023)', max_length=255)),
                ('source', models.CharField(blank=True, help_text='Source document name (e.g., HKEX Appendix 2, DEFRA)', max_length=255)),
                ('source_url', models.URLField(blank=True, help_text='URL to the source document', max_length=500, null=True)),
                ('year', models.PositiveIntegerField(db_index=True, help_text='Applicable year for the factor')),
                ('category', models.CharField(db_index=True, help_text='Broad activity category (e.g., Energy, Waste, Transport)', max_length=100)),
                ('sub_category', models.CharField(db_index=True, help_text='Specific activity/material and detail (e.g., Grid Electricity, Diesel - Stationary combustion)', max_length=255)),
                ('activity_unit', models.CharField(help_text='Unit of the *activity data* this factor applies to (e.g., MWh, tonne, km, kg, litres)', max_length=50)),
                ('value', models.DecimalField(decimal_places=7, help_text='The numerical emission factor', max_digits=15)),
                ('factor_unit', models.CharField(help_text='Unit of the factor (e.g., kgCO2e/MWh, tCO2e/tonne)', max_length=50)),
                ('region', models.CharField(blank=True, db_index=True, help_text='Geographic region applicability (e.g., UK, PRC, HK, ALL)', max_length=100, null=True)),
                ('scope', models.CharField(blank=True, db_index=True, help_text='Emission scope (e.g., Scope 1, Scope 2, Scope 3)', max_length=10)),
            ],
            options={
                'verbose_name': 'GHG Emission Factor',
                'verbose_name_plural': 'GHG Emission Factors',
                'ordering': ['-year', 'scope', 'category', 'sub_category', 'region'],
                'unique_together': {('year', 'category', 'sub_category', 'activity_unit', 'factor_unit', 'region', 'scope')},
            },
        ),
        migrations.CreateModel(
            name='PollutantFactor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(db_index=True, help_text='Broad activity category (e.g., Gaseous Fuel Consumption, Vehicles)', max_length=100)),
                ('sub_category', models.CharField(db_index=True, help_text='Specific activity/fuel/vehicle type (e.g., Towngas, Private cars)', max_length=255)),
                ('activity_unit', models.CharField(help_text='Unit of the activity data (e.g., Unit, MJ, L, kg, km)', max_length=50)),
                ('nox_factor', models.DecimalField(blank=True, decimal_places=7, help_text='NOx factor value per activity unit (e.g., g/Unit)', max_digits=15, null=True)),
                ('sox_factor', models.DecimalField(blank=True, decimal_places=7, help_text='SOx factor value per activity unit (e.g., g/Unit)', max_digits=15, null=True)),
                ('pm_factor', models.DecimalField(blank=True, decimal_places=7, help_text='PM factor value per activity unit (e.g., g/km)', max_digits=15, null=True)),
                ('pollutant_unit', models.CharField(default='g', help_text="Unit of the calculated pollutant (usually grams, 'g')", max_length=50)),
                ('year', models.PositiveIntegerField(db_index=True, help_text='Applicable year for the factor')),
                ('source', models.CharField(blank=True, help_text='Source document name', max_length=255)),
                ('source_url', models.URLField(blank=True, max_length=500, null=True)),
                ('region', models.CharField(blank=True, db_index=True, help_text='Geographic region applicability (e.g., HK / PRC, HK, ALL)', max_length=100, null=True)),
            ],
            options={
                'verbose_name': 'Pollutant Factor (NOx, SOx, PM)',
                'verbose_name_plural': 'Pollutant Factors (NOx, SOx, PM)',
                'ordering': ['-year', 'category', 'sub_category', 'region'],
                'unique_together': {('year', 'category', 'sub_category', 'activity_unit', 'region')},
            },
        ),
        migrations.CreateModel(
            name='CalculatedEnergyValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calculated_energy_value', models.DecimalField(decimal_places=5, help_text='The calculated energy value', max_digits=15)),
                ('energy_unit', models.CharField(help_text='Unit of the calculated energy (e.g., kWh, MJ)', max_length=50)),
                ('calculation_timestamp', models.DateTimeField(auto_now=True)),
                ('reporting_period', models.DateField(db_index=True)),
                ('level', models.CharField(choices=[('M', 'Monthly'), ('A', 'Annual')], db_index=True, max_length=1)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_management.templateassignment')),
                ('layer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.layerprofile')),
                ('source_activity_value', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='derived_energy_values', to='data_management.reportedmetricvalue')),
                ('energy_conversion_factor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='energy_conversion_calculations', to='data_management.energyconversionfactor')),
            ],
            options={
                'verbose_name': 'Calculated Energy Value',
                'verbose_name_plural': 'Calculated Energy Values',
                'ordering': ['-reporting_period', 'assignment', 'layer'],
                'indexes': [models.Index(fields=['reporting_period', 'level', 'layer'], name='data_manage_reporti_2dac5d_idx')],
                'unique_together': {('source_activity_value', 'energy_conversion_factor')},
            },
        ),
        migrations.CreateModel(
            name='CalculatedEmissionValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calculated_value', models.DecimalField(decimal_places=5, help_text='The calculated emission value (e.g., in kgCO2e or tCO2e)', max_digits=15)),
                ('emission_unit', models.CharField(help_text='Unit of the calculated emission (e.g., tCO2e, kgCO2e)', max_length=50)),
                ('calculation_timestamp', models.DateTimeField(auto_now=True)),
                ('reporting_period', models.DateField(db_index=True)),
                ('level', models.CharField(choices=[('M', 'Monthly'), ('A', 'Annual')], db_index=True, max_length=1)),
                ('emission_scope', models.CharField(blank=True, db_index=True, max_length=10)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_management.templateassignment')),
                ('layer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.layerprofile')),
                ('source_activity_value', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='derived_ghg_emissions', to='data_management.reportedmetricvalue')),
                ('emission_factor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ghg_emission_calculations', to='data_management.ghgemissionfactor')),
            ],
            options={
                'verbose_name': 'Calculated GHG Emission Value',
                'verbose_name_plural': 'Calculated GHG Emission Values',
                'ordering': ['-reporting_period', 'assignment', 'layer', 'emission_scope'],
                'indexes': [models.Index(fields=['reporting_period', 'level', 'layer'], name='data_manage_reporti_2a8aad_idx')],
                'unique_together': {('source_activity_value', 'emission_factor')},
            },
        ),
        migrations.CreateModel(
            name='CalculatedPollutantValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calculated_nox_g', models.DecimalField(blank=True, decimal_places=5, max_digits=15, null=True)),
                ('calculated_sox_g', models.DecimalField(blank=True, decimal_places=5, max_digits=15, null=True)),
                ('calculated_pm_g', models.DecimalField(blank=True, decimal_places=5, max_digits=15, null=True)),
                ('calculation_timestamp', models.DateTimeField(auto_now=True)),
                ('reporting_period', models.DateField(db_index=True)),
                ('level', models.CharField(choices=[('M', 'Monthly'), ('A', 'Annual')], db_index=True, max_length=1)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_management.templateassignment')),
                ('layer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.layerprofile')),
                ('source_activity_value', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='derived_pollutant_emissions', to='data_management.reportedmetricvalue')),
                ('pollutant_factor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='pollutant_emission_calculations', to='data_management.pollutantfactor')),
            ],
            options={
                'verbose_name': 'Calculated Pollutant Value (NOx, SOx, PM)',
                'verbose_name_plural': 'Calculated Pollutant Values (NOx, SOx, PM)',
                'ordering': ['-reporting_period', 'assignment', 'layer'],
                'indexes': [models.Index(fields=['reporting_period', 'level', 'layer'], name='data_manage_reporti_a8ee6e_idx')],
                'unique_together': {('source_activity_value', 'pollutant_factor')},
            },
        ),
    ]
