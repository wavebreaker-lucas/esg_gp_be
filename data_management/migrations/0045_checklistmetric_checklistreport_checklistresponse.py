# Generated by Django 5.1.7 on 2025-04-23 12:16

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0013_add_fuel_model_permissions'),
        ('data_management', '0044_esgmetricevidence_target_fuel_source'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChecklistMetric',
            fields=[
                ('baseesgmetric_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='data_management.baseesgmetric')),
                ('checklist_structure', models.JSONField(default=list, help_text='Structure of the checklist with categories, subcategories, and items')),
                ('show_item_ids', models.BooleanField(default=True, help_text="Whether to display item IDs (e.g., '1.1.a') in the checklist")),
                ('allow_partial_submission', models.BooleanField(default=True, help_text='Allow users to save incomplete checklists as drafts')),
                ('require_remarks_for_no', models.BooleanField(default=False, help_text="Require remarks when an item is marked as 'NO'")),
                ('enable_scoring', models.BooleanField(default=False, help_text='Enable numerical scoring for checklist items')),
                ('scoring_method', models.CharField(choices=[('SIMPLE', 'Simple Count (YES=1, NO=0)'), ('WEIGHTED', 'Weighted (Each item has a weight)'), ('CUSTOM', 'Custom formula')], default='SIMPLE', help_text='Method used for calculating compliance score', max_length=20)),
                ('scoring_weights', models.JSONField(blank=True, default=dict, help_text='Weights for items when using weighted scoring method')),
                ('checklist_type', models.CharField(choices=[('ENV', 'Environmental'), ('SOC', 'Social'), ('GOV', 'Governance'), ('GEN', 'General/Other')], default='GEN', help_text='The primary ESG category this checklist belongs to', max_length=3)),
            ],
            options={
                'verbose_name': 'Checklist Metric',
                'verbose_name_plural': 'Checklist Metrics',
            },
            bases=('data_management.baseesgmetric',),
        ),
        migrations.CreateModel(
            name='ChecklistReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('SINGLE', 'Single Checklist Report'), ('COMBINED', 'Combined ESG Report')], max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('company', models.CharField(max_length=255)),
                ('generated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('overall_compliance', models.FloatField(help_text='Overall compliance percentage')),
                ('environmental_compliance', models.FloatField(blank=True, help_text='Environmental compliance percentage (for combined reports)', null=True)),
                ('social_compliance', models.FloatField(blank=True, help_text='Social compliance percentage (for combined reports)', null=True)),
                ('governance_compliance', models.FloatField(blank=True, help_text='Governance compliance percentage (for combined reports)', null=True)),
                ('content', models.TextField(help_text='The full text content of the AI-generated report')),
                ('word_count', models.PositiveIntegerField(default=0, help_text='Word count of the generated report')),
                ('version', models.PositiveIntegerField(default=1, help_text='Report version number (increments when regenerated for same submission)')),
                ('layer', models.ForeignKey(help_text='The organizational layer this report belongs to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='checklist_reports', to='accounts.layerprofile')),
                ('primary_submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='primary_reports', to='data_management.esgmetricsubmission')),
                ('related_submissions', models.ManyToManyField(blank=True, help_text='Additional submissions included in a combined report', related_name='related_reports', to='data_management.esgmetricsubmission')),
            ],
            options={
                'verbose_name': 'Checklist Report',
                'verbose_name_plural': 'Checklist Reports',
                'ordering': ['-generated_at'],
            },
        ),
        migrations.CreateModel(
            name='ChecklistResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_id', models.CharField(help_text="ID of the category (e.g., '1.1')", max_length=20)),
                ('subcategory_name', models.CharField(help_text="Name of the subcategory (e.g., 'Monitoring and Review')", max_length=100)),
                ('item_id', models.CharField(help_text="ID of the specific item (e.g., 'a')", max_length=20)),
                ('item_text', models.TextField(help_text='Full text of the checklist item')),
                ('response', models.CharField(blank=True, choices=[('YES', 'Yes'), ('NO', 'No'), ('NA', 'Not Applicable')], help_text='The YES/NO response for this item', max_length=10, null=True)),
                ('remarks', models.TextField(blank=True, help_text='Additional remarks or explanation for this response')),
                ('score', models.DecimalField(blank=True, decimal_places=2, help_text='Score value if scoring is enabled', max_digits=10, null=True)),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checklist_responses', to='data_management.esgmetricsubmission')),
            ],
            options={
                'verbose_name': 'Checklist Response',
                'verbose_name_plural': 'Checklist Responses',
                'ordering': ['submission', 'category_id', 'item_id'],
                'unique_together': {('submission', 'category_id', 'item_id')},
            },
        ),
    ]
