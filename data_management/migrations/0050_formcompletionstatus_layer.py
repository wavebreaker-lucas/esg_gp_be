# Generated by Django 5.1.7 on 2025-05-10 09:15

import django.db.models.deletion
from django.db import migrations, models


def populate_layer_field(apps, schema_editor):
    """
    Populate the layer field for existing FormCompletionStatus records.
    For existing records, set layer to the assignment's layer.
    """
    FormCompletionStatus = apps.get_model('data_management', 'FormCompletionStatus')
    
    # Process records in batches to avoid memory issues with large datasets
    batch_size = 1000
    total_records = FormCompletionStatus.objects.count()
    
    for offset in range(0, total_records, batch_size):
        batch = FormCompletionStatus.objects.select_related('assignment').all()[offset:offset+batch_size]
        
        for status in batch:
            status.layer = status.assignment.layer
            status.save(update_fields=['layer'])


def reverse_layer_field(apps, schema_editor):
    """
    No need to do anything here since we're just setting the layer field to null
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0014_layerprofile_annual_revenue_and_more'),
        ('data_management', '0049_alter_templateformselection_completed_at_and_more'),
    ]

    operations = [
        # 1. Add the layer field with null=True to allow existing records
        migrations.AddField(
            model_name='formcompletionstatus',
            name='layer',
            field=models.ForeignKey(
                null=True,
                help_text='The layer this completion status applies to (could be assignment layer or child layer)',
                on_delete=django.db.models.deletion.CASCADE,
                related_name='form_completions',
                to='accounts.layerprofile'
            ),
        ),
        
        # 2. Run the data migration to populate the layer field
        migrations.RunPython(
            populate_layer_field,
            reverse_layer_field
        ),
        
        # 3. Make the field non-nullable after populating data
        migrations.AlterField(
            model_name='formcompletionstatus',
            name='layer',
            field=models.ForeignKey(
                help_text='The layer this completion status applies to (could be assignment layer or child layer)',
                on_delete=django.db.models.deletion.CASCADE,
                related_name='form_completions',
                to='accounts.layerprofile'
            ),
        ),
        
        # 4. Update unique_together constraint
        migrations.AlterUniqueTogether(
            name='formcompletionstatus',
            unique_together={('form_selection', 'assignment', 'layer')},
        ),
        
        # 5. Add an index for improved query performance
        migrations.AddIndex(
            model_name='formcompletionstatus',
            index=models.Index(fields=['layer'], name='data_manage_layer_idx'),
        ),
    ] 