# Generated by Django 5.1.7 on 2025-03-27 18:50

from django.db import migrations, models
import django.db.models.deletion


def assign_default_layer_to_existing_data(apps, schema_editor):
    ESGMetricSubmission = apps.get_model('data_management', 'ESGMetricSubmission')
    ESGMetricEvidence = apps.get_model('data_management', 'ESGMetricEvidence')
    LayerProfile = apps.get_model('accounts', 'LayerProfile')
    
    # Try to get default layer ID from settings
    try:
        from django.conf import settings
        default_layer_id = getattr(settings, 'DEFAULT_LAYER_ID', None)
    except ImportError:
        default_layer_id = None
    
    # If default layer ID is not set in settings, use the first group layer as fallback
    if default_layer_id:
        try:
            default_layer = LayerProfile.objects.get(id=default_layer_id)
            print(f"Using configured default layer (ID: {default_layer_id}): {default_layer.company_name}")
        except LayerProfile.DoesNotExist:
            print(f"Configured layer ID {default_layer_id} not found, trying fallback options")
            default_layer = None
    else:
        default_layer = None
    
    # If still no layer, try to find the first group layer
    if not default_layer:
        try:
            default_layer = LayerProfile.objects.filter(layer_type='GROUP').first()
            print(f"Using first group layer as default: {default_layer.company_name}")
        except (AttributeError, LayerProfile.DoesNotExist):
            # Final fallback - try any layer
            default_layer = LayerProfile.objects.first()
            if default_layer:
                print(f"Using first available layer as default: {default_layer.company_name}")
            else:
                print("No layers found in the system. Migration cannot continue.")
                return
    
    # Assign default layer to all submissions in bulk
    submission_count = ESGMetricSubmission.objects.update(layer=default_layer)
    
    # Assign default layer to all evidence in bulk
    evidence_count = ESGMetricEvidence.objects.update(layer=default_layer)
    
    print(f"Successfully assigned {submission_count} submissions and {evidence_count} evidence files to layer: {default_layer.company_name}")


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0001_initial'),  # Make sure this references the correct accounts migration
        ('data_management', '0016_alter_esgmetricevidence_enable_ocr_processing'),
    ]

    operations = [
        # First, add the layer field to ESGMetricSubmission model
        migrations.AddField(
            model_name='esgmetricsubmission',
            name='layer',
            field=models.ForeignKey(
                blank=True, 
                help_text="The layer this submission's data represents", 
                null=True, 
                on_delete=django.db.models.deletion.SET_NULL, 
                related_name='submissions', 
                to='accounts.layerprofile'
            ),
        ),
        
        # Then add the layer field to ESGMetricEvidence model
        migrations.AddField(
            model_name='esgmetricevidence',
            name='layer',
            field=models.ForeignKey(
                blank=True, 
                help_text='The layer this evidence is from', 
                null=True, 
                on_delete=django.db.models.deletion.SET_NULL, 
                related_name='evidence_files', 
                to='accounts.layerprofile'
            ),
        ),
        
        # Finally, run the data migration
        migrations.RunPython(
            assign_default_layer_to_existing_data,
            reverse_code=migrations.RunPython.noop
        ),
    ]
