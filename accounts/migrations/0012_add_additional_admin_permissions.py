# Generated by Django 5.1.7 on 2025-04-15 15:03

from django.db import migrations
from django.contrib.auth.management import create_permissions
from django.apps import apps as global_apps

# List of additional models that need permissions
ADDITIONAL_MODELS = [
    # Vehicle-related models
    'vehiclerecord',
    'vehiclemonthlydata',
    'vehicledatasource',
    
    # Calculation result models
    'calculatedemissionvalue',
    'calculatedpollutantvalue',
    'calculatedenergyvalue',
    
    # Specialized metric types
    'materialtrackingmatrixmetric',
    'multifieldtimeseriesmetric',
    'vehicletrackingmetric',
]

def add_additional_permissions(apps, schema_editor):
    """Grant permissions for additional models to Baker Tilly Admin group."""
    # Ensure permissions for the 'data_management' app are created
    try:
        dm_app_config = global_apps.get_app_config('data_management')
        create_permissions(dm_app_config, verbosity=0)
    except Exception as e:
        print(f"Warning (0012): Error triggering data_management permission creation: {e}")

    # Get models via apps registry
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    # Get Baker Tilly Admin group
    try:
        bt_group = Group.objects.get(name='Baker Tilly Admin')
    except Group.DoesNotExist:
        print("Warning (0012): 'Baker Tilly Admin' group not found. Skipping permission assignment.")
        return

    permissions_to_add = []

    # Query for the specific permissions for models
    for model_name in ADDITIONAL_MODELS:
        try:
            content_type = ContentType.objects.get(
                app_label='data_management',
                model=model_name
            )
            # Add view, add, and change permissions (not delete)
            for action in ['add', 'change', 'view']:
                codename = f"{action}_{model_name}"
                try:
                    perm = Permission.objects.get(
                        content_type=content_type,
                        codename=codename
                    )
                    permissions_to_add.append(perm)
                except Permission.DoesNotExist:
                    print(f"Warning (0012): Permission {codename} not found for data_management.{model_name}")
        except ContentType.DoesNotExist:
             print(f"Warning (0012): ContentType for data_management.{model_name} not found.")

    # Add permissions to group
    if permissions_to_add:
        bt_group.permissions.add(*permissions_to_add)
        print(f"Added {len(permissions_to_add)} additional model permissions (from 0012) to Baker Tilly Admin group")
    else:
        print("Warning (0012): No additional model permissions found to add.")

def remove_additional_permissions(apps, schema_editor):
    """Remove additional permissions from Baker Tilly Admin group."""
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    try:
        bt_group = Group.objects.get(name='Baker Tilly Admin')
    except Group.DoesNotExist:
        print("Warning (0012 reverse): 'Baker Tilly Admin' group not found. Skipping permission removal.")
        return

    permissions_to_remove = []

    for model_name in ADDITIONAL_MODELS:
        try:
            content_type = ContentType.objects.get(
                app_label='data_management',
                model=model_name
            )
            perms = Permission.objects.filter(
                content_type=content_type,
                codename__in=[f"{action}_{model_name}" for action in ['add', 'change', 'view']]
            )
            permissions_to_remove.extend(list(perms))
        except ContentType.DoesNotExist:
            print(f"Warning (0012 reverse): ContentType for data_management.{model_name} not found.")

    # Remove permissions from group
    if permissions_to_remove:
        for perm in permissions_to_remove:
            if bt_group.permissions.filter(pk=perm.pk).exists():
                bt_group.permissions.remove(perm)
        print(f"Removed {len(permissions_to_remove)} additional model permissions (from 0012) from Baker Tilly Admin group")


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0011_add_factor_management_permissions'),
        ('contenttypes', '__latest__'),
        ('auth', '__latest__'),
    ]

    operations = [
        migrations.RunPython(add_additional_permissions, remove_additional_permissions),
    ]
