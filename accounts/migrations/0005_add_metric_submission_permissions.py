# Generated by Django 5.1.7 on 2025-03-16 14:14

from django.db import migrations
from django.contrib.auth.models import Group, Permission
from django.contrib.contenttypes.models import ContentType

def add_metric_submission_permissions(apps, schema_editor):
    # Get Baker Tilly Admin group
    Group = apps.get_model('auth', 'Group')
    try:
        bt_group = Group.objects.get(name='Baker Tilly Admin')
    except Group.DoesNotExist:
        # If the group doesn't exist, there's nothing to do
        return
    
    # Get content types for the models
    ContentType = apps.get_model('contenttypes', 'ContentType')
    try:
        ESGMetricSubmission_ct = ContentType.objects.get(
            app_label='data_management', 
            model='esgmetricsubmission'
        )
        ESGMetricEvidence_ct = ContentType.objects.get(
            app_label='data_management', 
            model='esgmetricevidence'
        )
    except ContentType.DoesNotExist:
        # If the content types don't exist, there's nothing to do
        return
    
    # Get all permissions for these models
    Permission = apps.get_model('auth', 'Permission')
    submission_perms = Permission.objects.filter(content_type=ESGMetricSubmission_ct)
    evidence_perms = Permission.objects.filter(content_type=ESGMetricEvidence_ct)
    
    # Add permissions to the group
    for perm in submission_perms:
        bt_group.permissions.add(perm)
    
    for perm in evidence_perms:
        bt_group.permissions.add(perm)

def remove_metric_submission_permissions(apps, schema_editor):
    # Get Baker Tilly Admin group
    Group = apps.get_model('auth', 'Group')
    try:
        bt_group = Group.objects.get(name='Baker Tilly Admin')
    except Group.DoesNotExist:
        # If the group doesn't exist, there's nothing to do
        return
    
    # Get content types for the models
    ContentType = apps.get_model('contenttypes', 'ContentType')
    try:
        ESGMetricSubmission_ct = ContentType.objects.get(
            app_label='data_management', 
            model='esgmetricsubmission'
        )
        ESGMetricEvidence_ct = ContentType.objects.get(
            app_label='data_management', 
            model='esgmetricevidence'
        )
    except ContentType.DoesNotExist:
        # If the content types don't exist, there's nothing to do
        return
    
    # Get all permissions for these models
    Permission = apps.get_model('auth', 'Permission')
    submission_perms = Permission.objects.filter(content_type=ESGMetricSubmission_ct)
    evidence_perms = Permission.objects.filter(content_type=ESGMetricEvidence_ct)
    
    # Remove permissions from the group
    for perm in submission_perms:
        bt_group.permissions.remove(perm)
    
    for perm in evidence_perms:
        bt_group.permissions.remove(perm)

class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0004_add_data_management_permissions'),
        ('data_management', '0001_initial'),  # Make sure data_management models exist
    ]

    operations = [
        migrations.RunPython(add_metric_submission_permissions, remove_metric_submission_permissions),
    ]
