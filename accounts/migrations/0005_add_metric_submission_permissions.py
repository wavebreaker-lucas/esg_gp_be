# Generated by Django 5.1.7 on 2025-03-16 14:14

from django.db import migrations
# Removed direct Group, Permission, ContentType imports as we use apps registry
from django.contrib.auth.management import create_permissions
from django.apps import apps as global_apps

def add_metric_submission_permissions(apps, schema_editor):
    # Ensure permissions for the 'data_management' app are created (again, just in case)
    # It's generally safe to call create_permissions multiple times
    try:
        dm_app_config = global_apps.get_app_config('data_management')
        create_permissions(dm_app_config, verbosity=0)
        # Don't need to print success here again, 0004 should have done it
    except Exception as e:
        print(f"Error triggering data_management permission creation (in 0005): {e}")

    # Get models via apps registry
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    try:
        bt_group = Group.objects.get(name='Baker Tilly Admin')
    except Group.DoesNotExist:
        print("Warning: 'Baker Tilly Admin' group not found in migration 0005. Skipping.")
        return
    
    permissions_to_add = []
    models_to_check = ['esgmetricsubmission', 'esgmetricevidence']
    
    for model_name in models_to_check:
        try:
            content_type = ContentType.objects.get(
                app_label='data_management', 
                model=model_name
            )
            # Get all permissions for this specific model
            model_perms = Permission.objects.filter(content_type=content_type)
            permissions_to_add.extend(list(model_perms))
            
        except ContentType.DoesNotExist:
            print(f"Warning (0005): ContentType for data_management.{model_name} not found.")
            continue # Skip to next model if content type doesn't exist
    
    # Add permissions to the group
    if permissions_to_add:
        bt_group.permissions.add(*permissions_to_add)
        print(f"Added {len(permissions_to_add)} metric submission/evidence permissions (from 0005) to Baker Tilly Admin group")
    else:
         print("Warning (0005): No metric submission/evidence permissions found to add.")

def remove_metric_submission_permissions(apps, schema_editor):
    # This reverse function might still be fragile, but keeps original intent
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    try:
        bt_group = Group.objects.get(name='Baker Tilly Admin')
        models_to_check = ['esgmetricsubmission', 'esgmetricevidence']
        for model_name in models_to_check:
            try:
                content_type = ContentType.objects.get(
                    app_label='data_management', 
                    model=model_name
                )
                model_perms = Permission.objects.filter(content_type=content_type)
                for perm in model_perms:
                    if bt_group.permissions.filter(pk=perm.pk).exists():
                        bt_group.permissions.remove(perm)
            except ContentType.DoesNotExist:
                pass # If content type doesn't exist, can't remove perms
    except Group.DoesNotExist:
        pass # Group doesn't exist, nothing to remove

class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0004_add_data_management_permissions'),
        # Depend on the migration that creates the relevant models
        ('data_management', '0004_esgmetricsubmission_esgmetricevidence_and_more'), 
        ('contenttypes', '__latest__'),
        ('auth', '__latest__'),
    ]

    operations = [
        migrations.RunPython(add_metric_submission_permissions, remove_metric_submission_permissions),
    ]
