# Generated by Django on 2025-04-08

from django.db import migrations
from django.contrib.auth.management import create_permissions
from django.apps import apps as global_apps

# List of submission data model names (lowercase)
SUBMISSION_DATA_MODELS = [
    'timeseriesdatapoint',
    'basicmetricdata',
    'tabularmetricrow',
    'materialmatrixdatapoint',
    'multifieldtimeseriesdatapoint',
    'multifielddatapoint',
]

def add_submission_data_permissions(apps, schema_editor):
    """Grant permissions for all submission data models to Baker Tilly Admin group."""
    # Ensure permissions for the 'data_management' app are created
    try:
        dm_app_config = global_apps.get_app_config('data_management')
        create_permissions(dm_app_config, verbosity=0)
    except Exception as e:
        print(f"Warning (0010): Error triggering data_management permission creation: {e}")

    # Get models via apps registry
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    # Get Baker Tilly Admin group
    try:
        bt_group = Group.objects.get(name='Baker Tilly Admin')
    except Group.DoesNotExist:
        print("Warning (0010): 'Baker Tilly Admin' group not found. Skipping permission assignment.")
        return

    permissions_to_add = []

    # Query for the specific permissions for submission data models
    for model_name in SUBMISSION_DATA_MODELS:
        try:
            content_type = ContentType.objects.get(
                app_label='data_management',
                model=model_name
            )
            for action in ['add', 'change', 'delete', 'view']:
                codename = f"{action}_{model_name}"
                try:
                    perm = Permission.objects.get(
                        content_type=content_type,
                        codename=codename
                    )
                    permissions_to_add.append(perm)
                except Permission.DoesNotExist:
                    print(f"Warning (0010): Permission {codename} not found for data_management.{model_name}")
        except ContentType.DoesNotExist:
             print(f"Warning (0010): ContentType for data_management.{model_name} not found.")

    # Add permissions to group
    if permissions_to_add:
        bt_group.permissions.add(*permissions_to_add)
        print(f"Added {len(permissions_to_add)} submission data model permissions (from 0010) to Baker Tilly Admin group")
    else:
        print("Warning (0010): No submission data model permissions found to add.")

def remove_submission_data_permissions(apps, schema_editor):
    """Remove permissions for submission data models from Baker Tilly Admin group."""
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    try:
        bt_group = Group.objects.get(name='Baker Tilly Admin')
    except Group.DoesNotExist:
        print("Warning (0010 reverse): 'Baker Tilly Admin' group not found. Skipping permission removal.")
        return

    permissions_to_remove = []

    for model_name in SUBMISSION_DATA_MODELS:
        try:
            content_type = ContentType.objects.get(
                app_label='data_management',
                model=model_name
            )
            perms = Permission.objects.filter(
                content_type=content_type,
                codename__in=[f"{action}_{model_name}" for action in ['add', 'change', 'delete', 'view']]
            )
            permissions_to_remove.extend(list(perms))
        except ContentType.DoesNotExist:
            print(f"Warning (0010 reverse): ContentType for data_management.{model_name} not found.")

    # Remove permissions from group
    if permissions_to_remove:
        for perm in permissions_to_remove:
            if bt_group.permissions.filter(pk=perm.pk).exists():
                bt_group.permissions.remove(perm)
        print(f"Attempted removal of {len(permissions_to_remove)} submission data model permissions (from 0010) from Baker Tilly Admin group")

class Migration(migrations.Migration):

    dependencies = [
        # Depend on the previous permission migration
        ('accounts', '0009_add_child_metric_perms'),
        # Must depend on data_management migration that created the submission data models
        ('data_management', '0030_baseesgmetric_allow_multiple_submissions_per_period'),
        ('contenttypes', '__latest__'),
        ('auth', '__latest__'),
    ]

    operations = [
        migrations.RunPython(add_submission_data_permissions, remove_submission_data_permissions),
    ] 